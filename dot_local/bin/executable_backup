#!/bin/sh

# A simple script to easily backup and restore

RCLONE_COMMAND="rclone sync"
MOUNT=/mnt/
# MOUNT=/home/mkadit/temp/mount/Card/

if [ "$1" = 'data' ]; then
  SOURCES=(
    "Documents"

    # "Downloads/ISO"
    # ".local/share/sioyek"
  )
  # CLOUD_MOUNT=sync_g_drive:
  CLOUD_MOUNT=crypt_sync_g_drive:
elif [ "$1" = 'media' ]; then
  SOURCES=(
    "Music/etc"
    # "Music/Old Stuff"
    # "Music/Michael Jackson"
    "Pictures"
    ".config/swww"
    # "Videos/Archive/Anime"
  )
  CLOUD_MOUNT=crypt_sync_g_media:
  RCLONE_COMMAND="rclone copy"
fi

CLOUD_ISMOUNTED=$(rclone listremotes | grep "$CLOUD_MOUNT")
LOCAL_ISMOUNTED=$(mount | grep sdb || mount | grep simple-mtpfs)

local_sync() {

  if [ "$3" = 'restore' ]; then
    FROM="$MOUNT"
    TO="$HOME/"
    echo "Restoring $1 from $FROM to $TO"
  elif [ "$3" = 'backup' ]; then
    FROM="$HOME/"
    TO="$MOUNT"
    echo "Backup $1 from $FROM to $TO"
  fi

	for SOURCE in "${SOURCES[@]}"; do
		# Re configured files to delete as well
    # -a = archive mode
    # -u = skip files that are newer on the receiver
    # -A = preserve ACLs
    # -X = preserve extended attributes
    # -v = print the version + other info and exit
    # -P = Progress bar
		# rsync -auAXvP "$FROM$SOURCE" "$TO"
    # rclone copy -PL "$FROM$SOURCE" "$TO$SOURCE"
   $RCLONE_COMMAND -PL --fast-list "$FROM$SOURCE" "$TO$SOURCE/" --backup-dir "$TO/backup/$(date -I)/$SOURCE/"
	done

}

cloud_sync(){

  if [ "$3" = 'restore' ]; then
    FROM="$CLOUD_MOUNT"
    TO="$HOME/"
    echo "Restoring $1 from $FROM to $TO"
  elif [ "$3" = 'backup' ]; then
    FROM="$HOME/"
    TO="$CLOUD_MOUNT"
    echo "Backup $1 from $FROM to $TO"
  fi

	for SOURCE in "${SOURCES[@]}"; do
   $RCLONE_COMMAND -PL --fast-list "$FROM$SOURCE" "$TO$SOURCE/" --backup-dir "$TO/backup/$(date -I)/$SOURCE/"
  done
}

local_run() {

	if [ "$LOCAL_ISMOUNTED" != '' ]; then
		local_sync "$@"
	else
		echo "Drive is not mounted"
	fi
}

cloud_run() {

	if [ "$CLOUD_ISMOUNTED" != '' ]; then
		cloud_sync "$@"
	else
		echo "Drive is not mounted"
	fi
}

secret_restore(){
	cp -r /mnt/Important/. ~/
	chown -R "$(whoami)" ~/.gnupg/
	sudo chmod 700 ~/.ssh
	sudo chmod 600 ~/.ssh/id_rsa
	find ~/.gnupg -type f -exec chmod 600 {} \;
	find ~/.gnupg -type d -exec chmod 700 {} \;
	git clone git@github.com:mkadit/pass.git ~/.password-store

}

if [ "$2" = 'cloud' ]; then
  cloud_run "$@"
elif [ "$2" = 'local' ]; then
  local_run "$@"

elif [ "$1" = 'secret' ]; then
  secret_restore
fi
